/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Tasks example
 * The tasks API description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateTaskDto,
  TaskResponseDto,
  UpdateTaskDto
} from '.././model'
import { customBackendInstance } from '../../custom-backend-instance';
import type { ErrorType } from '../../custom-backend-instance';



export const tasksControllerGetTasks = (
    
 signal?: AbortSignal
) => {
      
      
      return customBackendInstance<TaskResponseDto[]>(
      {url: `/tasks`, method: 'GET', signal
    },
      );
    }
  

export const getTasksControllerGetTasksQueryKey = () => {
    return [`/tasks`] as const;
    }

    
export const getTasksControllerGetTasksQueryOptions = <TData = Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTasksControllerGetTasksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tasksControllerGetTasks>>> = ({ signal }) => tasksControllerGetTasks(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type TasksControllerGetTasksQueryResult = NonNullable<Awaited<ReturnType<typeof tasksControllerGetTasks>>>
export type TasksControllerGetTasksQueryError = ErrorType<unknown>


export function useTasksControllerGetTasks<TData = Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tasksControllerGetTasks>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTasksControllerGetTasks<TData = Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tasksControllerGetTasks>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTasksControllerGetTasks<TData = Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useTasksControllerGetTasks<TData = Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetTasks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getTasksControllerGetTasksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const tasksControllerCreateTask = (
    createTaskDto: CreateTaskDto,
 signal?: AbortSignal
) => {
      
      
      return customBackendInstance<TaskResponseDto>(
      {url: `/tasks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTaskDto, signal
    },
      );
    }
  


export const getTasksControllerCreateTaskMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tasksControllerCreateTask>>, TError,{data: CreateTaskDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tasksControllerCreateTask>>, TError,{data: CreateTaskDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tasksControllerCreateTask>>, {data: CreateTaskDto}> = (props) => {
          const {data} = props ?? {};

          return  tasksControllerCreateTask(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TasksControllerCreateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof tasksControllerCreateTask>>>
    export type TasksControllerCreateTaskMutationBody = CreateTaskDto
    export type TasksControllerCreateTaskMutationError = ErrorType<unknown>

    export const useTasksControllerCreateTask = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tasksControllerCreateTask>>, TError,{data: CreateTaskDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tasksControllerCreateTask>>,
        TError,
        {data: CreateTaskDto},
        TContext
      > => {

      const mutationOptions = getTasksControllerCreateTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const tasksControllerGetPostById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customBackendInstance<TaskResponseDto>(
      {url: `/tasks/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getTasksControllerGetPostByIdQueryKey = (id: string,) => {
    return [`/tasks/${id}`] as const;
    }

    
export const getTasksControllerGetPostByIdQueryOptions = <TData = Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTasksControllerGetPostByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tasksControllerGetPostById>>> = ({ signal }) => tasksControllerGetPostById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type TasksControllerGetPostByIdQueryResult = NonNullable<Awaited<ReturnType<typeof tasksControllerGetPostById>>>
export type TasksControllerGetPostByIdQueryError = ErrorType<unknown>


export function useTasksControllerGetPostById<TData = Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tasksControllerGetPostById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTasksControllerGetPostById<TData = Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tasksControllerGetPostById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTasksControllerGetPostById<TData = Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useTasksControllerGetPostById<TData = Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tasksControllerGetPostById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getTasksControllerGetPostByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const tasksControllerUpdateTask = (
    id: string,
    updateTaskDto: UpdateTaskDto,
 ) => {
      
      
      return customBackendInstance<TaskResponseDto>(
      {url: `/tasks/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTaskDto
    },
      );
    }
  


export const getTasksControllerUpdateTaskMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tasksControllerUpdateTask>>, TError,{id: string;data: UpdateTaskDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tasksControllerUpdateTask>>, TError,{id: string;data: UpdateTaskDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tasksControllerUpdateTask>>, {id: string;data: UpdateTaskDto}> = (props) => {
          const {id,data} = props ?? {};

          return  tasksControllerUpdateTask(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TasksControllerUpdateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof tasksControllerUpdateTask>>>
    export type TasksControllerUpdateTaskMutationBody = UpdateTaskDto
    export type TasksControllerUpdateTaskMutationError = ErrorType<unknown>

    export const useTasksControllerUpdateTask = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tasksControllerUpdateTask>>, TError,{id: string;data: UpdateTaskDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tasksControllerUpdateTask>>,
        TError,
        {id: string;data: UpdateTaskDto},
        TContext
      > => {

      const mutationOptions = getTasksControllerUpdateTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const tasksControllerDeleteTask = (
    id: string,
 ) => {
      
      
      return customBackendInstance<TaskResponseDto>(
      {url: `/tasks/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getTasksControllerDeleteTaskMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tasksControllerDeleteTask>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tasksControllerDeleteTask>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tasksControllerDeleteTask>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  tasksControllerDeleteTask(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TasksControllerDeleteTaskMutationResult = NonNullable<Awaited<ReturnType<typeof tasksControllerDeleteTask>>>
    
    export type TasksControllerDeleteTaskMutationError = ErrorType<unknown>

    export const useTasksControllerDeleteTask = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tasksControllerDeleteTask>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tasksControllerDeleteTask>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getTasksControllerDeleteTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    